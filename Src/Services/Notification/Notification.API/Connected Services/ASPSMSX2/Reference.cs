//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASPSMSX2
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://webservice.aspsms.com/aspsmsx2.asmx", ConfigurationName="ASPSMSX2.ASPSMSX2Soap")]
    public interface ASPSMSX2Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SimpleWAPPush", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SimpleWAPPushAsync(string UserKey, string Password, string Recipients, string Originator, string WapDescription, string WapURL, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SendSimpleTextSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSimpleTextSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SendTextSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendTextSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SendUnicodeSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendUnicodeSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/CheckCredits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckCreditsAsync(string UserKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SendOriginatorUnlockCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendOriginatorUnlockCodeAsync(string UserKey, string Password, string Originator);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/UnlockOriginator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UnlockOriginatorAsync(string UserKey, string Password, string Originator, string OriginatorUnlockCode, string AffiliateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/CheckOriginatorAuthorization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckOriginatorAuthorizationAsync(string UserKey, string Password, string Originator);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/VerifyToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VerifyTokenAsync(string UserKey, string Password, string PhoneNumber, string TokenReference, string VerificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/SendTokenSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendTokenSMSAsync(string UserKey, string Password, string Originator, string Recipients, string MessageData, string TokenReference, string TokenValidity, string TokenMask, string VerificationCode, string TokenCaseSensitive, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/InquireDeliveryNotifications", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InquireDeliveryNotificationsAsync(string UserKey, string Password, string TransactionReferenceNumbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/RedeemVoucher", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RedeemVoucherAsync(string UserKey, string Password, string RedeemCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/CreateVoucher", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateVoucherAsync(string UserKey, string Password, string NumberOfVouchers, string AmountCreditsPerVoucher, string Remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/GetVoucherTransactions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ASPSMSX2.vouchers[]> GetVoucherTransactionsAsync(string UserKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/GetStatusCodeDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStatusCodeDescriptionAsync(string StatusCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservice.aspsms.com/aspsmsx2.asmx/VersionInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VersionInfoAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://webservice.aspsms.com/aspsmsx2.asmx")]
    public partial class vouchers
    {
        
        private string voucherCodeField;
        
        private string remarkField;
        
        private string creditsField;
        
        private string createdField;
        
        private string redeemedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string VoucherCode
        {
            get
            {
                return this.voucherCodeField;
            }
            set
            {
                this.voucherCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Remark
        {
            get
            {
                return this.remarkField;
            }
            set
            {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Credits
        {
            get
            {
                return this.creditsField;
            }
            set
            {
                this.creditsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Created
        {
            get
            {
                return this.createdField;
            }
            set
            {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Redeemed
        {
            get
            {
                return this.redeemedField;
            }
            set
            {
                this.redeemedField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ASPSMSX2SoapChannel : ASPSMSX2.ASPSMSX2Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ASPSMSX2SoapClient : System.ServiceModel.ClientBase<ASPSMSX2.ASPSMSX2Soap>, ASPSMSX2.ASPSMSX2Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ASPSMSX2SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ASPSMSX2SoapClient.GetBindingForEndpoint(endpointConfiguration), ASPSMSX2SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ASPSMSX2SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ASPSMSX2SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ASPSMSX2SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ASPSMSX2SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ASPSMSX2SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> SimpleWAPPushAsync(string UserKey, string Password, string Recipients, string Originator, string WapDescription, string WapURL, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId)
        {
            return base.Channel.SimpleWAPPushAsync(UserKey, Password, Recipients, Originator, WapDescription, WapURL, DeferredDeliveryTime, FlashingSMS, TimeZone, URLBufferedMessageNotification, URLDeliveryNotification, URLNonDeliveryNotification, AffiliateId);
        }
        
        public System.Threading.Tasks.Task<string> SendSimpleTextSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText)
        {
            return base.Channel.SendSimpleTextSMSAsync(UserKey, Password, Recipients, Originator, MessageText);
        }
        
        public System.Threading.Tasks.Task<string> SendTextSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId)
        {
            return base.Channel.SendTextSMSAsync(UserKey, Password, Recipients, Originator, MessageText, DeferredDeliveryTime, FlashingSMS, TimeZone, URLBufferedMessageNotification, URLDeliveryNotification, URLNonDeliveryNotification, AffiliateId);
        }
        
        public System.Threading.Tasks.Task<string> SendUnicodeSMSAsync(string UserKey, string Password, string Recipients, string Originator, string MessageText, string DeferredDeliveryTime, string FlashingSMS, string TimeZone, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId)
        {
            return base.Channel.SendUnicodeSMSAsync(UserKey, Password, Recipients, Originator, MessageText, DeferredDeliveryTime, FlashingSMS, TimeZone, URLBufferedMessageNotification, URLDeliveryNotification, URLNonDeliveryNotification, AffiliateId);
        }
        
        public System.Threading.Tasks.Task<string> CheckCreditsAsync(string UserKey, string Password)
        {
            return base.Channel.CheckCreditsAsync(UserKey, Password);
        }
        
        public System.Threading.Tasks.Task<string> SendOriginatorUnlockCodeAsync(string UserKey, string Password, string Originator)
        {
            return base.Channel.SendOriginatorUnlockCodeAsync(UserKey, Password, Originator);
        }
        
        public System.Threading.Tasks.Task<string> UnlockOriginatorAsync(string UserKey, string Password, string Originator, string OriginatorUnlockCode, string AffiliateId)
        {
            return base.Channel.UnlockOriginatorAsync(UserKey, Password, Originator, OriginatorUnlockCode, AffiliateId);
        }
        
        public System.Threading.Tasks.Task<string> CheckOriginatorAuthorizationAsync(string UserKey, string Password, string Originator)
        {
            return base.Channel.CheckOriginatorAuthorizationAsync(UserKey, Password, Originator);
        }
        
        public System.Threading.Tasks.Task<string> VerifyTokenAsync(string UserKey, string Password, string PhoneNumber, string TokenReference, string VerificationCode)
        {
            return base.Channel.VerifyTokenAsync(UserKey, Password, PhoneNumber, TokenReference, VerificationCode);
        }
        
        public System.Threading.Tasks.Task<string> SendTokenSMSAsync(string UserKey, string Password, string Originator, string Recipients, string MessageData, string TokenReference, string TokenValidity, string TokenMask, string VerificationCode, string TokenCaseSensitive, string URLBufferedMessageNotification, string URLDeliveryNotification, string URLNonDeliveryNotification, string AffiliateId)
        {
            return base.Channel.SendTokenSMSAsync(UserKey, Password, Originator, Recipients, MessageData, TokenReference, TokenValidity, TokenMask, VerificationCode, TokenCaseSensitive, URLBufferedMessageNotification, URLDeliveryNotification, URLNonDeliveryNotification, AffiliateId);
        }
        
        public System.Threading.Tasks.Task<string> InquireDeliveryNotificationsAsync(string UserKey, string Password, string TransactionReferenceNumbers)
        {
            return base.Channel.InquireDeliveryNotificationsAsync(UserKey, Password, TransactionReferenceNumbers);
        }
        
        public System.Threading.Tasks.Task<string> RedeemVoucherAsync(string UserKey, string Password, string RedeemCode)
        {
            return base.Channel.RedeemVoucherAsync(UserKey, Password, RedeemCode);
        }
        
        public System.Threading.Tasks.Task<string> CreateVoucherAsync(string UserKey, string Password, string NumberOfVouchers, string AmountCreditsPerVoucher, string Remarks)
        {
            return base.Channel.CreateVoucherAsync(UserKey, Password, NumberOfVouchers, AmountCreditsPerVoucher, Remarks);
        }
        
        public System.Threading.Tasks.Task<ASPSMSX2.vouchers[]> GetVoucherTransactionsAsync(string UserKey, string Password)
        {
            return base.Channel.GetVoucherTransactionsAsync(UserKey, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusCodeDescriptionAsync(string StatusCode)
        {
            return base.Channel.GetStatusCodeDescriptionAsync(StatusCode);
        }
        
        public System.Threading.Tasks.Task<string> VersionInfoAsync()
        {
            return base.Channel.VersionInfoAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ASPSMSX2Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ASPSMSX2Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ASPSMSX2Soap))
            {
                return new System.ServiceModel.EndpointAddress("https://soap.aspsms.com/aspsmsx2.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ASPSMSX2Soap12))
            {
                return new System.ServiceModel.EndpointAddress("https://soap.aspsms.com/aspsmsx2.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ASPSMSX2Soap,
            
            ASPSMSX2Soap12,
        }
    }
}
